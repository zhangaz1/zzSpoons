[
  {
    "desc": "Add some missing hotkeys for opening a note in Evernote, and for common tag sets",
    "name": "EvernoteOpenAndTag",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "EvernoteOpenAndTag",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for EvernoteOpenAndTag",
    "module": "EvernoteOpenAndTag",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Returns `true` if Evernote is the frontmost application",
    "module": "EvernoteOpenAndTag",
    "name": "evernoteIsFrontmost",
    "type": "Method"
  },
  {
    "desc": "Apply the given tags to the selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "inlineTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the current Evernote note in a new window and apply the given tags to it",
    "module": "EvernoteOpenAndTag",
    "name": "openAndTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the currently-selected Evernote notes in new windows.",
    "module": "EvernoteOpenAndTag",
    "name": "openCurrentNoteInWindow",
    "type": "Method"
  },
  {
    "desc": "Assigns tags to the currently-selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "tagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Automate some Hammerspoon configuration tasks",
    "name": "Hammer",
    "type": "Module"
  },
  {
    "desc": "If true, automatically reload Hammerspoon config when any `.lua` files inside `hs.configdir` changes",
    "module": "Hammer",
    "name": "auto_reload_config",
    "type": "Variable"
  },
  {
    "desc": "If true, install the `hs` command line tool",
    "module": "Hammer",
    "name": "install_cli",
    "type": "Variable"
  },
  {
    "desc": "Reload config only if any of the Lua files in `files` have changed",
    "module": "Hammer",
    "name": "autoReloadConfig",
    "type": "Method"
  },
  {
    "desc": "Binds hotkeys for Hammer",
    "module": "Hammer",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Manually reload configuration (wrapper around `hs.reload`)",
    "module": "Hammer",
    "name": "reloadConfig",
    "type": "Method"
  },
  {
    "desc": "Start the Spoon. At the moment this includes:",
    "module": "Hammer",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "name": "HeadphoneAutoPause",
    "type": "Module"
  },
  {
    "desc": "Table containing one key per application, with the value indicating whether HeadphoneAutoPause should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
    "module": "HeadphoneAutoPause",
    "name": "control",
    "type": "Variable"
  },
  {
    "desc": "Table containing control functions for each application to control.",
    "module": "HeadphoneAutoPause",
    "name": "controlfns",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "HeadphoneAutoPause",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
    "module": "HeadphoneAutoPause",
    "name": "audiodevwatch",
    "type": "Method"
  },
  {
    "desc": "Generate the most common set of application control definition.",
    "module": "HeadphoneAutoPause",
    "name": "defaultControlFns",
    "type": "Method"
  },
  {
    "desc": "Start headphone detection on all audio devices that support it",
    "module": "HeadphoneAutoPause",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop headphone detection",
    "module": "HeadphoneAutoPause",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Show a popup window with the translation of the currently selected (or other) text",
    "name": "PopupTranslateSelection",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "PopupTranslateSelection",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If true, pressing ESC on the popup window will close it. Defaults to `true`",
    "module": "PopupTranslateSelection",
    "name": "popup_close_on_escape",
    "type": "Variable"
  },
  {
    "desc": "`hs.geometry` object representing the size to use for the translation popup window. Defaults to `hs.geometry.size(770, 610)`.",
    "module": "PopupTranslateSelection",
    "name": "popup_size",
    "type": "Variable"
  },
  {
    "desc": "Value representing the window style to be used for the translation popup window. This value needs to be a valid argument to [`hs.webview.setStyle()`](http://www.hammerspoon.org/docs/hs.webview.html#windowStyle) (i.e. a combination of values from [`hs.webview.windowMasks`](http://www.hammerspoon.org/docs/hs.webview.html#windowMasks[]). Default value: `hs.webview.windowMasks.utility|hs.webview.windowMasks.HUD|hs.webview.windowMasks.titled|hs.webview.windowMasks.closable`",
    "module": "PopupTranslateSelection",
    "name": "popup_style",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for PopupTranslateSelection",
    "module": "PopupTranslateSelection",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Display a translation popup with the translation of the given text between the specified languages",
    "module": "PopupTranslateSelection",
    "name": "translatePopup",
    "type": "Method"
  },
  {
    "desc": "Get the current selected text in the frontmost window and display a translation popup with the translation between the specified languages",
    "module": "PopupTranslateSelection",
    "name": "translateSelectionPopup",
    "type": "Method"
  },
  {
    "desc": "Install and manage Spoons and Spoon repositories",
    "name": "SpoonInstall",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "SpoonInstall",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Table containing the list of available Spoon repositories. The key",
    "module": "SpoonInstall",
    "name": "repos",
    "type": "Variable"
  },
  {
    "desc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.",
    "module": "SpoonInstall",
    "name": "use_syncinstall",
    "type": "Variable"
  },
  {
    "desc": "Declaratively install, load and configure a Spoon",
    "module": "SpoonInstall",
    "name": "andUse",
    "type": "Method"
  },
  {
    "desc": "Asynchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Asynchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Asynchronously fetch the information about the contents of a Spoon repository",
    "module": "SpoonInstall",
    "name": "asyncUpdateRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "installSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "installSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Return a sorted list of registered Spoon repositories",
    "module": "SpoonInstall",
    "name": "repolist",
    "type": "Method"
  },
  {
    "desc": "Search repositories for a pattern",
    "module": "SpoonInstall",
    "name": "search",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch the information about the contents of all Spoon repositories registered in `SpoonInstall.repos`",
    "module": "SpoonInstall",
    "name": "updateAllRepos",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch the information about the contents of a Spoon repository",
    "module": "SpoonInstall",
    "name": "updateRepo",
    "type": "Method"
  },
  {
    "desc": "Configure and assign hotkey for `hs.grid`",
    "name": "WindowGrid",
    "type": "Module"
  },
  {
    "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
    "module": "WindowGrid",
    "name": "gridGeometries",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowGrid",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowGrid",
    "module": "WindowGrid",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
    "module": "WindowGrid",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes",
    "name": "WindowHalfsAndThirds",
    "type": "Module"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowHalfsAndThirds",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowHalfsAndThirds",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
    "module": "WindowHalfsAndThirds",
    "name": "use_frame_correctness",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowHalfsAndThirds",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Move windows to other screens",
    "name": "WindowScreenLeftAndRight",
    "type": "Module"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowScreenLeftAndRight",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowScreenLeftAndRight",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowScreenLeftAndRight",
    "module": "WindowScreenLeftAndRight",
    "name": "bindHotkeys",
    "type": "Method"
  }
]