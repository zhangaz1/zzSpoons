[
  {
    "desc": "Show a color sample/picker",
    "name": "ColorPicker",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ColorPicker",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Title to show in the menubar if `show_in_menubar` is true. Defaults to `\"\\u{1F308}\"`, which is the [Rainbow Emoji](http://emojipedia.org/rainbow/)",
    "module": "ColorPicker",
    "name": "menubar_title",
    "type": "Variable"
  },
  {
    "desc": "If `true`, show an icon in the menubar to trigger the color picker",
    "module": "ColorPicker",
    "name": "show_in_menubar",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ColorPicker",
    "module": "ColorPicker",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Toggle display on the screen of a grid with all the colors in the given colortable",
    "module": "ColorPicker",
    "name": "toggleColorSamples",
    "type": "Method"
  },
  {
    "desc": "Add some missing hotkeys for opening a note in Evernote, and for common tag sets",
    "name": "EvernoteOpenAndTag",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "EvernoteOpenAndTag",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for EvernoteOpenAndTag",
    "module": "EvernoteOpenAndTag",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Returns `true` if Evernote is the frontmost application",
    "module": "EvernoteOpenAndTag",
    "name": "evernoteIsFrontmost",
    "type": "Method"
  },
  {
    "desc": "Apply the given tags to the selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "inlineTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the current Evernote note in a new window and apply the given tags to it",
    "module": "EvernoteOpenAndTag",
    "name": "openAndTagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Open the currently-selected Evernote notes new windows",
    "module": "EvernoteOpenAndTag",
    "name": "openCurrentNoteInWindow",
    "type": "Method"
  },
  {
    "desc": "Assigns tags to the currently-selected Evernote notes",
    "module": "EvernoteOpenAndTag",
    "name": "tagCurrentNote",
    "type": "Method"
  },
  {
    "desc": "Show a fading-and-zooming image in the center of the screen",
    "name": "FadeLogo",
    "type": "Module"
  },
  {
    "desc": "Number of seconds over which to fade in the image. Defaults to 0.3.",
    "module": "FadeLogo",
    "name": "fade_in_time",
    "type": "Variable"
  },
  {
    "desc": "Number of seconds over which to fade out the image. Defaults to 0.5.",
    "module": "FadeLogo",
    "name": "fade_out_time",
    "type": "Variable"
  },
  {
    "desc": "Image to display. Must be an `hs.image` object. Defaults to `hs.image.imageFromAppBundle('org.hammerspoon.Hammerspoon')` (the Hammerspoon app icon)",
    "module": "FadeLogo",
    "name": "image",
    "type": "Variable"
  },
  {
    "desc": "Initial transparency of the image. Defaults to 1.0.",
    "module": "FadeLogo",
    "name": "image_alpha",
    "type": "Variable"
  },
  {
    "desc": "`hs.geometry` object specifying the initial size of the image to display in the center of the screen. The image object will be resizes proportionally to fit in this size. Defaults to `hs.geometry.size(w=200, h=200)`",
    "module": "FadeLogo",
    "name": "image_size",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "FadeLogo",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Number of seconds to leave the image on the screen when `start()` is called.",
    "module": "FadeLogo",
    "name": "run_time",
    "type": "Variable"
  },
  {
    "desc": "Do zoom-and-fade if `true`, otherwise do a regular fade",
    "module": "FadeLogo",
    "name": "zoom",
    "type": "Variable"
  },
  {
    "desc": "Factor by which to scale the image at every iteration during the zoom-and-fade. Defaults to 1.1.",
    "module": "FadeLogo",
    "name": "zoom_scale_factor",
    "type": "Variable"
  },
  {
    "desc": "Seconds between the zooming iterations",
    "module": "FadeLogo",
    "name": "zoom_scale_timer",
    "type": "Variable"
  },
  {
    "desc": "Hide and delete the canvas",
    "module": "FadeLogo",
    "name": "delete",
    "type": "Method"
  },
  {
    "desc": "Hide the image without zoom, fading it out over `fade_out_time` seconds",
    "module": "FadeLogo",
    "name": "hide",
    "type": "Method"
  },
  {
    "desc": "Display the image, fading it in over `fade_in_time` seconds",
    "module": "FadeLogo",
    "name": "show",
    "type": "Method"
  },
  {
    "desc": "Show the image, wait `run_time` seconds, and then fade it out.",
    "module": "FadeLogo",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Zoom-and-fade the image over `fade_out_time` seconds",
    "module": "FadeLogo",
    "name": "zoom_and_fade",
    "type": "Method"
  },
  {
    "desc": "Automate some Hammerspoon configuration tasks",
    "name": "Hammer",
    "type": "Module"
  },
  {
    "desc": "If true, automatically reload Hammerspoon config when any `.lua` files inside `hs.configdir` changes",
    "module": "Hammer",
    "name": "auto_reload_config",
    "type": "Variable"
  },
  {
    "desc": "If true, install the `hs` command line tool",
    "module": "Hammer",
    "name": "install_cli",
    "type": "Variable"
  },
  {
    "desc": "Reload config only if any of the Lua files in `files` have changed",
    "module": "Hammer",
    "name": "autoReloadConfig",
    "type": "Method"
  },
  {
    "desc": "Binds hotkeys for Hammer",
    "module": "Hammer",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Manually reload configuration (wrapper around `hs.reload`)",
    "module": "Hammer",
    "name": "reloadConfig",
    "type": "Method"
  },
  {
    "desc": "Start the Spoon. At the moment this includes:",
    "module": "Hammer",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "name": "HeadphoneWatcher",
    "type": "Module"
  },
  {
    "desc": "Table containing one key per application, with the value indicating whether HeadphoneWatcher should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
    "module": "HeadphoneWatcher",
    "name": "control",
    "type": "Variable"
  },
  {
    "desc": "Table containing control functions for each application to control.",
    "module": "HeadphoneWatcher",
    "name": "controlfns",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "HeadphoneWatcher",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
    "module": "HeadphoneWatcher",
    "name": "audiodevwatch",
    "type": "Method"
  },
  {
    "desc": "Generate the most common set of application control definition.",
    "module": "HeadphoneWatcher",
    "name": "defaultControlFns",
    "type": "Method"
  },
  {
    "desc": "Start headphone detection on all audio devices that support it",
    "module": "HeadphoneWatcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop headphone detection",
    "module": "HeadphoneWatcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Install and manage Spoons",
    "name": "SpoonInstall",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "SpoonInstall",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Table containing the list of available Spoon repositories. The key",
    "module": "SpoonInstall",
    "name": "repos",
    "type": "Variable"
  },
  {
    "desc": "If `true`, `andUse()` will update repos and install packages synchronously. Defaults to `false`.",
    "module": "SpoonInstall",
    "name": "use_syncinstall",
    "type": "Variable"
  },
  {
    "desc": "Declaratively install, load and configure a Spoon",
    "module": "SpoonInstall",
    "name": "andUse",
    "type": "Method"
  },
  {
    "desc": "Asynchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Asynchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "asyncInstallSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Asynchronously fetch and store locally the information about the contents of a Spoons repository",
    "module": "SpoonInstall",
    "name": "asyncUpdateRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously install a Spoon from a registered repository",
    "module": "SpoonInstall",
    "name": "installSpoonFromRepo",
    "type": "Method"
  },
  {
    "desc": "Synchronously download a Spoon zip file and install it.",
    "module": "SpoonInstall",
    "name": "installSpoonFromZipURL",
    "type": "Method"
  },
  {
    "desc": "Return a sorted list of registered Spoon repositories",
    "module": "SpoonInstall",
    "name": "repolist",
    "type": "Method"
  },
  {
    "desc": "Search repositories for a pattern",
    "module": "SpoonInstall",
    "name": "search",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch and store locally the information about the contents of all registered Spoons repositories",
    "module": "SpoonInstall",
    "name": "updateAllRepos",
    "type": "Method"
  },
  {
    "desc": "Synchronously fetch and store locally the information about the contents of a Spoons repository",
    "module": "SpoonInstall",
    "name": "updateRepo",
    "type": "Method"
  },
  {
    "desc": "Keep a history of the clipboard, only for text entries.",
    "name": "TextClipboardHistory",
    "type": "Module"
  },
  {
    "desc": "Whether to remove duplicates from the list, keeping only the latest one. Defaults to `true`.",
    "module": "TextClipboardHistory",
    "name": "deduplicate",
    "type": "Variable"
  },
  {
    "desc": "Speed in seconds to check for clipboard changes. If you check too frequently, you will degrade performance, if you check sparsely you will loose copies. Defaults to 0.8.",
    "module": "TextClipboardHistory",
    "name": "frequency",
    "type": "Variable"
  },
  {
    "desc": "How many items to keep on history. Defaults to 100",
    "module": "TextClipboardHistory",
    "name": "hist_size",
    "type": "Variable"
  },
  {
    "desc": "If `true`, check the data identifiers set in the pasteboard and ignore entries which match those listed in `TextClipboardHistory.ignoredIdentifiers`. The list of identifiers comes from http://nspasteboard.org. Defaults to `true`",
    "module": "TextClipboardHistory",
    "name": "honor_ignoredidentifiers",
    "type": "Variable"
  },
  {
    "desc": "Types of clipboard entries to ignore, see http://nspasteboard.org. Code from https://github.com/asmagill/hammerspoon-config/blob/master/utils/_menus/newClipper.lua",
    "module": "TextClipboardHistory",
    "name": "ignoredIdentifiers",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "TextClipboardHistory",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "String to show in the menubar if `TextClipboardHistory.show_in_menubar` is `true`. Defaults to `\"\\u{1f4ce}\"`, which is the [Unicode paperclip character](https://codepoints.net/U+1F4CE)",
    "module": "TextClipboardHistory",
    "name": "menubar_title",
    "type": "Variable"
  },
  {
    "desc": "Whether to auto-type the item when selecting it from the menu. Can be toggled on the fly from the chooser. Defaults to `false`.",
    "module": "TextClipboardHistory",
    "name": "paste_on_select",
    "type": "Variable"
  },
  {
    "desc": "Whether to show a menubar item to open the clipboard history. Defaults to `true`",
    "module": "TextClipboardHistory",
    "name": "show_in_menubar",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for TextClipboardHistory",
    "module": "TextClipboardHistory",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "If the pasteboard has changed, we add the current item to our history and update the counter",
    "module": "TextClipboardHistory",
    "name": "checkAndStorePasteboard",
    "type": "Method"
  },
  {
    "desc": "Clears the clipboard and history",
    "module": "TextClipboardHistory",
    "name": "clearAll",
    "type": "Method"
  },
  {
    "desc": "Clears the last added to the history",
    "module": "TextClipboardHistory",
    "name": "clearLastItem",
    "type": "Method"
  },
  {
    "desc": "Add the given string to the history",
    "module": "TextClipboardHistory",
    "name": "pasteboardToClipboard",
    "type": "Method"
  },
  {
    "desc": "Display the current clipboard list in a chooser",
    "module": "TextClipboardHistory",
    "name": "showClipboard",
    "type": "Method"
  },
  {
    "desc": "Start the clipboard history collector",
    "module": "TextClipboardHistory",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Show/hide the clipboard list, depending on its current state",
    "module": "TextClipboardHistory",
    "name": "toggleClipboard",
    "type": "Method"
  },
  {
    "desc": "Toggle the value of `TextClipboardHistory.paste_on_select`",
    "module": "TextClipboardHistory",
    "name": "togglePasteOnSelect",
    "type": "Method"
  },
  {
    "desc": "Provide keybindings for muting/unmuting Skype or Skype for Business",
    "name": "ToggleSkypeMute",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ToggleSkypeMute",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ToggleSkypeMute",
    "module": "ToggleSkypeMute",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
    "module": "ToggleSkypeMute",
    "name": "toggle",
    "type": "Method"
  },
  {
    "desc": "Configure and assign hotkey for `hs.grid`",
    "name": "WindowGrid",
    "type": "Module"
  },
  {
    "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
    "module": "WindowGrid",
    "name": "gridGeometries",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowGrid",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowGrid",
    "module": "WindowGrid",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
    "module": "WindowGrid",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes",
    "name": "WindowHalfsAndThirds",
    "type": "Module"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowHalfsAndThirds",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
    "module": "WindowHalfsAndThirds",
    "name": "use_frame_correctness",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowHalfsAndThirds",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Map a number of hotkeys according to a definition table",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeysToSpec",
    "type": "Method"
  },
  {
    "desc": "Move windows to other screens",
    "name": "WindowScreenLeftAndRight",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowScreenLeftAndRight",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowScreenLeftAndRight",
    "module": "WindowScreenLeftAndRight",
    "name": "bindHotkeys",
    "type": "Method"
  }
]