[
  {
    "desc": "Automate some Hammerspoon configuration tasks",
    "name": "Hammer",
    "type": "Module"
  },
  {
    "desc": "If true, automatically reload Hammerspoon config when any `.lua` files inside `hs.configdir` changes",
    "module": "Hammer",
    "name": "auto_reload_config",
    "type": "Variable"
  },
  {
    "desc": "If true, install the `hs` command line tool",
    "module": "Hammer",
    "name": "install_cli",
    "type": "Variable"
  },
  {
    "desc": "Reload config only if any of the Lua files in `files` have changed",
    "module": "Hammer",
    "name": "autoReloadConfig",
    "type": "Method"
  },
  {
    "desc": "Binds hotkeys for Hammer",
    "module": "Hammer",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Manually reload configuration (wrapper around `hs.reload`)",
    "module": "Hammer",
    "name": "reloadConfig",
    "type": "Method"
  },
  {
    "desc": "Start the Spoon. At the moment this includes:",
    "module": "Hammer",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Play/pause music players when headphones are connected/disconnected",
    "name": "HeadphoneWatcher",
    "type": "Module"
  },
  {
    "desc": "Table containing one key per application, with the value indicating whether HeadphoneWatcher should try to pause/unpause that application in response to the headphone being plugged/unplugged. The key name must ideally correspond to the name of the corresponding `hs.*` module. Default value:",
    "module": "HeadphoneWatcher",
    "name": "control",
    "type": "Variable"
  },
  {
    "desc": "Table containing control functions for each application to control.",
    "module": "HeadphoneWatcher",
    "name": "controlfns",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "HeadphoneWatcher",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Callback function to use as an audio device watcher, to pause/unpause the application on headphones plugged/unplugged",
    "module": "HeadphoneWatcher",
    "name": "audiodevwatch",
    "type": "Method"
  },
  {
    "desc": "Generate the most common set of application control definition.",
    "module": "HeadphoneWatcher",
    "name": "defaultControlFns",
    "type": "Method"
  },
  {
    "desc": "Start headphone detection on all audio devices that support it",
    "module": "HeadphoneWatcher",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Stop headphone detection",
    "module": "HeadphoneWatcher",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Provide keybindings for muting/unmuting Skype or Skype for Business",
    "name": "ToggleSkypeMute",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "ToggleSkypeMute",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for ToggleSkypeMute",
    "module": "ToggleSkypeMute",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Toggle Skype between muted/unmuted, whether it is focused or not",
    "module": "ToggleSkypeMute",
    "name": "toggle",
    "type": "Method"
  },
  {
    "desc": "Configure and assign hotkey for `hs.grid`",
    "name": "WindowGrid",
    "type": "Module"
  },
  {
    "desc": "Table containing a list of arguments to be passed to grid.setGrid(). Each element in the table is itself a table with 1-3 arguments as defined for [hs.grid.setGrid()](http://www.hammerspoon.org/docs/hs.grid.html#setGrid). Defaults to an empty list, which results in the default 3x3 grid for all screen from `hs.grid`.",
    "module": "WindowGrid",
    "name": "gridGeometries",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowGrid",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowGrid",
    "module": "WindowGrid",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Sets the grid configuration according to `WindowGrid.gridGeometries`.",
    "module": "WindowGrid",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Simple window movement and resizing, focusing on half- and third-of-screen sizes",
    "name": "WindowHalfsAndThirds",
    "type": "Module"
  },
  {
    "desc": "Table containing a sample set of hotkeys that can be",
    "module": "WindowHalfsAndThirds",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "If `true`, set [setFrameCorrectness](http://www.hammerspoon.org/docs/hs.window.html#setFrameCorrectness) for some resizing operations which fail when the window extends beyonds screen boundaries. This may cause some jerkiness in the resizing, so experiment and determine if you need it. Defaults to `false`",
    "module": "WindowHalfsAndThirds",
    "name": "use_frame_correctness",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowHalfsAndThirds",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Map a number of hotkeys according to a definition table",
    "module": "WindowHalfsAndThirds",
    "name": "bindHotkeysToSpec",
    "type": "Method"
  },
  {
    "desc": "Move windows to other screens",
    "name": "WindowScreenLeftAndRight",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
    "module": "WindowScreenLeftAndRight",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Binds hotkeys for WindowScreenLeftAndRight",
    "module": "WindowScreenLeftAndRight",
    "name": "bindHotkeys",
    "type": "Method"
  }
]